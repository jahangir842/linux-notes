# **Convert a Standard Partition to LVM in Linux**
You can convert a **standard partition (ext4, XFS, etc.)** to **LVM (Logical Volume Manager)**, but this process involves **data loss** unless you back up your data first.

---

## **⚠️ Important Notes Before Proceeding**
✅ **Backup all data** on the partition you want to convert.  
✅ **Unmount the partition** before converting it.  
✅ This method requires deleting the partition and creating a new **LVM physical volume (PV)**.  

---

## **📌 Steps to Convert a Standard Partition to LVM**
### **Step 1: Identify the Partition**
List the partitions on your disk:
```bash
lsblk
fdisk -l
```
Example output:
```
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
sda      8:0    0  100G  0 disk  
├─sda1   8:1    0   50G  0 part /
└─sda2   8:2    0   50G  0 part /data
```
Here, `/dev/sda2` is the partition we want to convert to LVM.

---

### **Step 2: Backup Your Data**
Use `rsync` or `tar` to create a backup:
```bash
sudo rsync -av /data /backup/
```

---

### **Step 3: Unmount the Partition**
```bash
sudo umount /dev/sda2
```

---

### **Step 4: Delete the Existing Partition**
Use `fdisk` to delete the partition:
```bash
sudo fdisk /dev/sda
```
Inside `fdisk`, do the following:
1. Press `p` → Lists partitions.
2. Press `d` → Deletes the partition (choose `/dev/sda2`).
3. Press `w` → Saves changes.

---

### **Step 5: Create a New LVM Partition**
Re-enter `fdisk`:
```bash
sudo fdisk /dev/sda
```
1. Press `n` → Create a new partition.
2. Select `primary` or `logical`.
3. Choose the same size as the deleted partition.
4. Change the partition type to **LVM (8e)**:
   - Press `t`, then enter `8e`.
5. Press `w` to write changes.

Verify with:
```bash
lsblk
```

---

### **Step 6: Create an LVM Physical Volume (PV)**
```bash
sudo pvcreate /dev/sda2
```

---

### **Step 7: Create a Volume Group (VG)**
```bash
sudo vgcreate my_vg /dev/sda2
```

---

### **Step 8: Create a Logical Volume (LV)**
Create a logical volume using **all available space**:
```bash
sudo lvcreate -l 100%FREE -n my_lv my_vg
```

---

### **Step 9: Format the Logical Volume**
Format as **ext4**:
```bash
sudo mkfs.ext4 /dev/my_vg/my_lv
```
Or as **XFS**:
```bash
sudo mkfs.xfs /dev/my_vg/my_lv
```

---

### **Step 10: Mount the New LV**
Create a mount point:
```bash
sudo mkdir /mnt/data
```
Mount the LV:
```bash
sudo mount /dev/my_vg/my_lv /mnt/data
```

To make the change permanent, add this line to `/etc/fstab`:
```bash
/dev/my_vg/my_lv  /mnt/data  ext4  defaults  0  2
```

---

### **Step 11: Restore Data**
Copy back the data:
```bash
sudo rsync -av /backup/ /mnt/data/
```

---

## **✅ Summary**
| Step | Command | Purpose |
|------|---------|---------|
| 1️⃣ | `lsblk` | Identify partition |
| 2️⃣ | `rsync -av /data /backup/` | Backup data |
| 3️⃣ | `umount /dev/sda2` | Unmount partition |
| 4️⃣ | `fdisk /dev/sda` | Delete old partition |
| 5️⃣ | `fdisk /dev/sda` → `8e` | Create LVM partition |
| 6️⃣ | `pvcreate /dev/sda2` | Create LVM physical volume |
| 7️⃣ | `vgcreate my_vg /dev/sda2` | Create volume group |
| 8️⃣ | `lvcreate -l 100%FREE -n my_lv my_vg` | Create logical volume |
| 9️⃣ | `mkfs.ext4 /dev/my_vg/my_lv` | Format LV |
| 🔟 | `mount /dev/my_vg/my_lv /mnt/data` | Mount LV |
| 🔟+ | `rsync -av /backup/ /mnt/data/` | Restore data |

---

Now your **standard partition is converted to LVM!** 🎯  
Let me know if you need any modifications! 🚀
